<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>whx</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/whxRookie/"/>
  <updated>2019-03-24T15:00:46.756Z</updated>
  <id>https://github.com/whxRookie/</id>
  
  <author>
    <name>whx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HBase-简介</title>
    <link href="https://github.com/whxRookie/2019/03/24/bigdata/HBase-%E7%AE%80%E4%BB%8B/"/>
    <id>https://github.com/whxRookie/2019/03/24/bigdata/HBase-简介/</id>
    <published>2019-03-24T14:00:00.000Z</published>
    <updated>2019-03-24T15:00:46.756Z</updated>
    
    <content type="html"><![CDATA[<p><strong> HBase-简介：</strong> <excerpt in index | 首页摘要><br>大数据组件-列式数据库 HBase<br><a id="more"></a></excerpt></p><the rest of contents | 余下全文><h1 id="HBase-简介"><a href="#HBase-简介" class="headerlink" title="HBase-简介"></a>HBase-简介</h1><p>1、HBase是一个分布式的、持久的、强一致性的存储系统，具有近视最优的写性能（能使IO利用率达到饱和）和出色的读性能。</p><p>2、支持特定列族切换可选压缩算法。</p><p>3、只考虑单一索引，提供服务器端钩子，可实施辅助索引解决方案。</p><p>4、提供过滤器功能，减少网络传输的数据量。</p><h2 id="1、HBase结构"><a href="#1、HBase结构" class="headerlink" title="1、HBase结构"></a>1、HBase结构</h2><h3 id="1-1、表、行、列、单元格"><a href="#1-1、表、行、列、单元格" class="headerlink" title="1.1、表、行、列、单元格"></a>1.1、表、行、列、单元格</h3><p>最基本的单位是列。</p><p>1、一个表中有若干行，每列可能有多个版本，每个单元格中存储了不同的值，一列或多列形成一行，并由唯一的行键来确定存储。</p><p>2、行序按照行键的字典排序进行排序，行键唯一。字典序中是按照二进制逐字节从左到右依次对比每个行键排序。</p><p>3、一个列族的所有列存储在同一个底层的存储文件里，这个存储文件叫做HFile。</p><p>列族、列、单元格：</p><p>1、列族需在创建表时就定义好，且不能频繁修改，数量不能过多。</p><p>2、列族名必须由可打印字符组成。</p><p>3、一个列族可以有数百万个列。</p><p>4、列值没有类型和长度限制。</p><p>5、列或单元格的值都有时间戳、默认由系统指定，用户可显示设置。</p><p>6、一个单元格的不同版本的值按照降序排列在一起，访问的时候优先读取最新的值。</p><p>行：</p><p>1、行看作是所有列以及这些列的最新版本的组合。</p><p>2、行数据的存取操作是原子的，可任意读写任意数目的列。</p><p>3、目前不支持跨行事物和跨表事物。</p><p>示例数据存储模式：SortMap&lt;RowKey, List&lt;SortedMap,&lt;Column, List&lt;Value, Timestamp&gt;&gt;&gt;&gt;</p><p>NULL说明：固定模式数据库在没有值的地方必须存储NULL值，HBase的存储架构中，可以省略整个列，空值不占用任何存储空间。</p><h3 id="1-2、自动分区"><a href="#1-2、自动分区" class="headerlink" title="1.2、自动分区"></a>1.2、自动分区</h3><p>HBase中扩展和负载的基本单元是region，region本质是行键排序的连续存储的区间。当region太大，系统将其动态才分。相反，就把多个region合并，减少存储文件数量（HBase不支持在线region合并，有离线出来合并工具，后期讨论）。</p><h2 id="1-3、实现"><a href="#1-3、实现" class="headerlink" title="1.3、实现"></a>1.3、实现</h2><p>1、数据（键值映射结构）经过排序存储在存储文件HFile中（HFile存储在磁盘）。</p><p>2、HFile文件内部由连续的块组成，块的索引信息存储在文件尾部（块64KB）。</p><p>3、更新数据时，先将数据记录在提交日志中（预写日志WAL），然后将数据写入内存中的memstore中（行键已排序）。</p><p>4、内存写入数据超过给定最大值时，数据将做为HFile写入到磁盘，数据移出内存后丢弃对应的提交日志，只保留为持久化的提交日志。</p><p>5、删除标记：存储文件是不可被改变的，无法通过移除某个键值对来简单的删除值。解决办法是做删除标记，表明给定行已被删除。在检索时，标记掩盖了实际值，客户端读不到实际值。</p><p>6、返回值：读回的数据是memstore和磁盘存储文件的数据合并结果。</p><p>7、WAL：服务器内存数据在服务器崩溃前未写入时，用WAL来进行数据恢复。</p><p>8、HFile合并：minor合并和major压缩合并。</p><p>​    minor将多个小文件重写为比较少的文件，实际是多路归并的过程。因为HFile的每个文件都是经过归类的，仅受磁盘IO影响。</p><p>​    major将一个region中的一个列族的若干个HFile重写为一个新HFile。与minor合并相比，mojor合并能扫描所有键值对，顺序重写全部的数据，在此过程中将忽略做删除标记的数据，即重写数据时不再写入磁盘。</p></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; HBase-简介：&lt;/strong&gt; &lt;excerpt in index | 首页摘要&gt;&lt;br&gt;大数据组件-列式数据库 HBase&lt;br&gt;
    
    </summary>
    
      <category term="bigdata" scheme="https://github.com/whxRookie/categories/bigdata/"/>
    
    
      <category term="HBase" scheme="https://github.com/whxRookie/tags/HBase/"/>
    
  </entry>
  
  <entry>
    <title>About</title>
    <link href="https://github.com/whxRookie/2019/03/24/About/"/>
    <id>https://github.com/whxRookie/2019/03/24/About/</id>
    <published>2019-03-24T14:00:00.000Z</published>
    <updated>2019-03-24T15:36:44.304Z</updated>
    
    <content type="html"><![CDATA[<p><strong> About：</strong> <excerpt in index | 首页摘要><br>个人笔记博客，记录下生活、工作中的点滴。<br><a id="more"></a></excerpt></p><the rest of contents | 余下全文><p>先立下flag，后期再逐步更新。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1、java</span><br><span class="line">2、goland</span><br><span class="line">3、微服务组件</span><br><span class="line">API网关</span><br><span class="line">配置中心</span><br><span class="line">注册中心</span><br><span class="line">通讯组件</span><br><span class="line">分布式事物</span><br><span class="line">4、大数据组件</span><br><span class="line">HDFS</span><br><span class="line">HBase</span><br><span class="line">Storm</span><br><span class="line">Spark</span><br><span class="line">5、AI-技术调研</span><br><span class="line">5、杂记</span><br></pre></td></tr></table></figure></the>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt; About：&lt;/strong&gt; &lt;excerpt in index | 首页摘要&gt;&lt;br&gt;个人笔记博客，记录下生活、工作中的点滴。&lt;br&gt;
    
    </summary>
    
      <category term="about" scheme="https://github.com/whxRookie/categories/about/"/>
    
    
      <category term="about" scheme="https://github.com/whxRookie/tags/about/"/>
    
  </entry>
  
</feed>
